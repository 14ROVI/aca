.memory
    //len: .int 1000
    //list: .int 644, 432, 454, 635, 951, 70, 861, 852, 580, 452, 40, 408, 369, 685, 871, 257, 420, 620, 284, 332, 883, 663, 708, 804, 510, 928, 796, 255, 908, 804, 398, 512, 816, 332, 713, 104, 1, 815, 242, 884, 502, 501, 858, 764, 973, 489, 49, 836, 606, 948, 410, 327, 531, 808, 735, 486, 121, 714, 833, 151, 800, 69, 884, 420, 572, 304, 325, 142, 249, 35, 604, 152, 628, 175, 406, 928, 744, 241, 747, 698, 368, 730, 815, 975, 784, 480, 405, 640, 400, 526, 809, 704, 803, 721, 67, 377, 473, 373, 412, 697, 890, 15, 864, 605, 588, 856, 6, 818, 708, 142, 153, 983, 293, 798, 395, 892, 817, 202, 281, 355, 862, 761, 261, 939, 621, 59, 608, 972, 800, 198, 858, 448, 851, 670, 811, 386, 367, 331, 364, 83, 707, 2, 155, 705, 606, 14, 194, 86, 751, 929, 25, 217, 687, 645, 216, 727, 58, 66, 408, 769, 254, 998, 783, 994, 483, 775, 380, 59, 600, 495, 312, 176, 965, 234, 273, 101, 964, 965, 270, 757, 495, 273, 660, 496, 660, 432, 365, 472, 986, 667, 959, 851, 603, 244, 88, 338, 138, 963, 423, 27, 325, 912, 406, 432, 376, 606, 795, 379, 203, 842, 292, 851, 113, 708, 687, 901, 423, 748, 744, 367, 459, 487, 592, 515, 414, 372, 150, 380, 439, 61, 728, 948, 247, 791, 660, 363, 13, 319, 87, 774, 519, 988, 288, 527, 588, 875, 315, 618, 724, 162, 731, 749, 926, 405, 875, 67, 812, 635, 335, 634, 549, 456, 711, 429, 502, 640, 185, 707, 558, 355, 983, 3, 105, 935, 595, 687, 172, 77, 522, 198, 52, 554, 625, 710, 340, 102, 828, 769, 668, 465, 894, 931, 324, 739, 34, 628, 881, 254, 805, 528, 985, 767, 748, 13, 803, 339, 474, 794, 822, 60, 479, 93, 833, 618, 787, 122, 270, 22, 330, 546, 640, 917, 790, 850, 218, 289, 229, 433, 297, 208, 28, 639, 72, 354, 830, 921, 2, 633, 109, 952, 366, 269, 733, 915, 380, 965, 543, 944, 378, 384, 438, 900, 563, 308, 159, 197, 798, 744, 860, 381, 584, 360, 999, 414, 451, 623, 13, 173, 571, 39, 644, 565, 890, 620, 125, 624, 530, 526, 282, 580, 200, 190, 683, 576, 859, 235, 960, 144, 426, 495, 733, 714, 583, 445, 210, 989, 678, 425, 345, 629, 631, 441, 677, 89, 523, 726, 479, 9, 210, 326, 506, 774, 187, 865, 931, 285, 130, 158, 13, 160, 460, 926, 625, 482, 119, 422, 155, 863, 485, 83, 734, 404, 16, 1, 577, 76, 65, 438, 787, 16, 771, 107, 742, 753, 719, 805, 209, 386, 747, 699, 899, 423, 737, 441, 602, 286, 742, 447, 57, 841, 943, 875, 803, 871, 644, 697, 829, 95, 337, 287, 552, 900, 601, 436, 362, 803, 495, 326, 922, 735, 694, 282, 758, 976, 658, 658, 991, 862, 797, 304, 302, 585, 661, 220, 143, 30, 311, 249, 720, 458, 280, 349, 115, 655, 290, 663, 279, 695, 164, 540, 263, 660, 48, 110, 721, 340, 705, 410, 718, 851, 283, 281, 434, 939, 824, 900, 624, 811, 144, 23, 652, 16, 398, 37, 630, 62, 185, 390, 187, 881, 457, 749, 555, 498, 541, 333, 462, 35, 907, 146, 947, 281, 111, 922, 987, 165, 601, 716, 753, 706, 274, 855, 959, 810, 362, 894, 644, 242, 358, 684, 809, 957, 415, 528, 795, 2, 711, 290, 172, 83, 965, 932, 257, 185, 543, 85, 130, 365, 469, 707, 267, 498, 998, 570, 325, 377, 831, 801, 727, 754, 287, 107, 127, 841, 449, 435, 286, 510, 524, 431, 956, 595, 792, 823, 93, 819, 880, 896, 602, 897, 727, 563, 643, 937, 775, 14, 52, 504, 233, 17, 238, 265, 952, 887, 902, 674, 791, 943, 371, 431, 514, 802, 354, 501, 398, 597, 848, 470, 578, 584, 877, 268, 441, 69, 298, 602, 975, 240, 453, 287, 385, 760, 224, 797, 294, 262, 897, 217, 368, 897, 36, 57, 629, 79, 721, 367, 340, 339, 302, 264, 85, 221, 842, 464, 437, 296, 877, 166, 983, 280, 920, 187, 803, 870, 615, 29, 479, 56, 896, 123, 856, 427, 18, 480, 341, 342, 214, 8, 581, 755, 690, 437, 754, 100, 21, 569, 459, 912, 538, 134, 969, 887, 341, 375, 827, 1000, 836, 178, 360, 83, 191, 602, 670, 328, 93, 384, 203, 846, 346, 591, 693, 769, 552, 664, 134, 597, 347, 578, 575, 643, 635, 363, 840, 129, 488, 117, 488, 272, 888, 30, 6, 269, 155, 761, 72, 406, 895, 866, 762, 33, 936, 964, 233, 472, 538, 125, 653, 387, 851, 762, 786, 785, 428, 670, 613, 340, 784, 729, 181, 172, 113, 813, 510, 869, 941, 301, 583, 432, 18, 692, 96, 685, 517, 998, 999, 633, 308, 337, 417, 519, 763, 233, 641, 307, 854, 440, 203, 306, 501, 565, 524, 729, 277, 940, 965, 363, 329, 965, 285, 305, 640, 741, 454, 764, 212, 492, 527, 99, 477, 674, 127, 177, 384, 777, 54, 773, 306, 52, 804, 345, 299, 901, 580, 18, 261, 209, 262, 788, 12, 459, 297, 263, 633, 514, 401, 404, 516, 37, 762, 512, 268, 879, 882, 446, 203, 603, 921, 94, 564, 458, 535, 372, 668, 966, 965, 375, 725, 700, 413, 858, 761, 731, 165, 328, 29, 965, 2, 592, 493, 475, 37, 3, 367, 687, 691, 832, 276, 424, 986, 785, 799, 570, 90, 110, 788, 945, 725, 723, 579, 73, 726, 192, 946, 619, 762, 276, 140, 812, 708, 402, 131, 178, 438, 321, 369, 398, 316, 827, 356, 335, 50, 34, 276, 16, 990, 499, 593, 795, 130, 319, 691, 70, 525, 305, 279, 771, 83, 603, 880, 462, 227, 897, 594, 483, 407, 120, 464, 757, 556, 358, 211, 83, 517, 652, 377, 557, 958, 214, 866, 303, 778, 512, 469, 488, 879, 382, 846, 330, 749, 498, 335, 552, 652, 952, 354, 67, 646, 748, 675, 936
    //workspace: .space 4000

    len: .int 10
    list: .int 6, 3, 5, 0, 9, 4, 2, 8, 1, 7
    workspace: .space 40

.instructions
    
    start:
        lw $1 $0 len // n
        li $2 1 // width
        li $30 0

        run_width_loop:
            bge $2 $1 exit_run_width_loop

            li $3 0 // i

            num_runs_loop:
                bge $3 $1 exit_num_runs_loop

                add $4 $3 $2 // i + width
                ble $4 $1 no_min_add // if $4 <= n keep
                add $4 $1 $0 // set 4 to n
                no_min_add:

                lsft $5 $2 1 // width * 2
                add $5 $3 $5 // i + width * 2
                ble $5 $1 no_min_mult // if $4 <= n keep
                add $5 $1 $0 // set 4 to n
                no_min_mult:

                // $3 is left pos, $4 is right pos, $5 is end pos
                add $6 $3 $0 // $6 left index
                add $7 $4 $0 // $7 right index

                add $8 $6 $0 // loop variant
                merge_el_loop:
                    bge $8 $5 exit_merge_el_loop
                    
                    lsft $12 $6 2
                    lw $10 $12 list // A[i]

                    lsft $12 $7 2
                    lw $11 $12 list // A[j]

                    bge $6 $4 append_right
                        bl $7 $5 apls
                        apltc:
                        // bge $8 $1 exit
                        lsft $12 $8 2
                        sw $10 $12 workspace
                        addi $6 $6 1
            
                        j end_append_ifs

                        apls:
                        ble $10 $11 apltc
                        j append_right
                        
                    append_right:
                        
                        bge $8 $1 exit
                        lsft $12 $8 2
                        sw $11 $12 workspace
                        addi $7 $7 1

                    end_append_ifs:

                    addi $8 $8 1
                    j merge_el_loop
                exit_merge_el_loop:

                lsft $8 $2 1
                add $3 $3 $8
                j num_runs_loop
            exit_num_runs_loop:

            // copy workspace array to list (can reuse registers used from the "loop function")
            li $8 0
            copy_array_loop:
                bge $8 $1 exit_copy_array_loop

                lsft $12 $8 2
                lw $9 $12 workspace // B[i]
                sw $9 $12 list // A[i] = B[i]

                addi $8 $8 1
                j copy_array_loop
            exit_copy_array_loop:

            lsft $2 $2 1
            j run_width_loop
        exit_run_width_loop:

        j exit

    exit:
