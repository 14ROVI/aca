.memory
    image: .file assets/input.ppm
    width: .int 0
    height: .int 0
    pixel_depth: .int 0
    content_ptr: .int 0
    expected_magic_number: .int 20534
    nl: .int 10
    space: .int 32
    num_img_bytes: .int 0
    new_img_ptr: .int 0

    box_radius: .int 3 // box radius variable!

.instructions
    main:
        li $2 3 // dont care magic number go to 3 bytes in
        li $3 width
        jal $4 read_ascii_number // load width

        addi $2 $2 1
        li $3 height
        jal $4 read_ascii_number // load height

        addi $2 $2 1
        li $3 pixel_depth
        jal $4 read_ascii_number // load pixel_depth

        addi $2 $2 1
        sw $2 $0 content_ptr
    
        // reserve memory for blured image
        lw $1 $0 width
        lw $2 $0 height
        mult $3 $2 $1 // width * height
        li $1 3
        mult $3 $3 $1 // 3 bytes per pixel (r, g, b)
        sw $3 $0 num_img_bytes // store number of bytes in num_img_bytes
        reserve $1 $3 0
        sw $1 $0 new_img_ptr // store pointer to this reserved memory in new_img_ptr


        // width, height, width*height, 3, num_bytes, box_radiux, -box_radius, box_len, content_ptr, new_img_ptr,
        // rgb_index, diff_between_rows, diff_between_kernels, start_kernel_diff

        li $1 0 // rgb_index
        lw $2 $0 width // width
        lw $3 $0 height // height
        mult $4 $3 $2 // width * height
        li $5 3 // 3
        mult $6 $4 $5 // num_bytes
        lw $7 $0 box_radius // box_radius
        neg $8 $7 // -box_radius
        add $9 $7 $7
        subi $9 $9 1 // box_len
        lw $10 $0 content_ptr // content_ptr
        lw $11 $0 new_img_ptr // new_img_ptr

        sub $12 $2 $9 // width - box_len
        mult $12 $12 $5 // (width - box_len) * 3 = diff_between_rows

        mult $13 $2 $9 // width * box_len
        mult $13 $13 $5 // width * box_len * 3
        neg $13 $13 // - width * 3 * box_len = diff_between_kernels

        mult $14 $2 $5 // width * 3
        mult $15 $7 $5 // box_radius * 3

        addi $18 $11 0 //  new image data location index

        mult $19 $2 $8 // width * -box_radius
        mult $19 $19 $5 // width * -box_radius * 3
        sub $19 $19 $15 // width * -box_radius * 3 - box_radius*3


        image_loop:
            bge $1 $6 end_image_loop

            div $1 $14
            mflo $16 // remainder - x*3 val
            mfhi $17 // quotent - y val

            // skip if at borders, kernel doesnt fit
            bl $16 $15 continue_image_loop // x*3 < box_radius * 3
            bl $17 $7 continue_image_loop // y < box_radius
            add $31 $16 $15
            bge $31 $14 continue_image_loop // x*3 + box_radius * 3 >= width * 3
            add $31 $17 $7
            bge $31 $3 continue_image_loop // y + box_radius >= height

            addi $1 $1 15
            add $1 $1 $19

            // calc average
            li $20 0 // sum r
            li $21 0 // sum g
            li $22 0 // sum b
            li $23 0 // total boxes

            li $24 0 // ky
            kern_y_start:
                bge $24 $9 kern_y_end

                li $25 0 // kx
                kern_x_start:
                    bge $25 $9 kern_x_end

                        // here be the loop content!!! add value of r,g,b to the sums

                        lc $31 $1 image
                        add $20 $20 $17
                        addi $1 $1 1 // now index of g

                        lc $17 $1 image
                        add $21 $21 $17
                        addi $1 $1 1 // now index of b

                        lc $17 $1 image
                        add $22 $22 $17
                        addi $1 $1 1 // now index of r of next one

                        addi $23 $23 1
                        // added these values to the sums, now go to next values

                    addi $25 $25 1
                    j kern_x_start
                kern_x_end:

                add $1 $1 $12
                
                addi $24 $24 1
                j kern_y_start
            kern_y_end:

            addi $1 $1 -15
            sub $1 $1 $19

            div $20 $23
            mfhi $20 // $6 is now the average value of r for $1 index
            div $21 $23
            mfhi $21 // $7 is now the average value of g for $1 index
            div $22 $23
            mfhi $22 // $8 is now the average value of b for $1 index

            sc $20 $18 0
            addi $18 $18 1
            sc $21 $18 0
            addi $18 $18 1
            sc $22 $18 0
            addi $18 $18 1
            
            addi $18 $18 -3
            add $1 $1 $13

            continue_image_loop:
            addi $1 $1 3
            addi $18 $18 3
            j image_loop
        end_image_loop:

        save $6 $11 0

        exit $0


// here be functions


    read_ascii_number: // $2 = read mem loc, $3 = write mem loc, $4 = ret addr
        lc $5 $2 0 // get ascii val
        li $6 0 // initialise val as 0

    read_ascii_number_loop:
        addi $2 $2 1 // incr read
        subi $5 $5 48 // now $5 contains value of number not ascii char
        add $6 $6 $5 // $6 is both

        lc $5 $2 0
        lw $7 $0 nl
        be $7 $5 exit_read_ascii_number
        lw $7 $0 space
        be $7 $5 exit_read_ascii_number
        li $7 10
        mult $6 $6 $7 // this char is 10 times bigger
        j read_ascii_number_loop

    exit_read_ascii_number: 
        sw $6 $3 0
        jr $4
